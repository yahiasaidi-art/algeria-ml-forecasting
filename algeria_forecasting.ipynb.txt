{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning for Economic Forecasting in Algeria\n",
    "\n",
    "This notebook implements the full ML pipeline from the paper:\n",
    "**\"Machine Learning-Based Economic Forecasting in Resource-Constrained Economies: A Case Study of Algeria\"**\n",
    "\n",
    "Models: Linear Regression, ARIMA, Random Forest, Prophet, LSTM\n",
    "\n",
    "Data: 2003â€“2023 | Test Period: 2020â€“2023"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from prophet import Prophet\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# For LSTM\n",
    "import tensorflow as tf\n",
    "tf.get_logger().setLevel('ERROR')\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "print(\"âœ… Libraries loaded\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data\n",
    "data = {\n",
    "    'Year': [2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023],\n",
    "    'GDP_Growth': [6.5, 4.5, 5.4, 2.9, 3.1, 2.5, 1.2, 4.8, 3.0, 2.4, 2.6, 4.1, 3.2, 3.9, 1.5, 1.4, 0.9, -5.0, 3.8, 3.6, 4.1],\n",
    "    'Inflation': [4.27, 3.96, 1.38, 2.31, 3.68, 4.86, 5.75, 3.91, 4.52, 8.89, 3.25, 2.92, 4.78, 6.40, 5.59, 4.27, 1.95, 2.42, 7.23, 9.27, 9.32],\n",
    "    'Unemployment': [23.7, 17.7, 15.3, 12.3, 13.8, 11.3, 10.2, 9.96, 9.96, 10.97, 9.82, 10.21, 11.21, 10.20, 10.33, 10.4, 12.3, 14.06, 13.63, 12.35, 11.70],\n",
    "    'Oil_Price': [31.08, 41.51, 56.64, 66.05, 72.34, 99.67, 61.95, 79.48, 94.88, 94.05, 97.98, 93.17, 48.66, 43.29, 50.80, 65.23, 56.99, 39.68, 68.17, 94.53, 77.64],\n",
    "    'Gov_Exp_GDP': [15.12, 13.97, 12.43, 11.95, 12.39, 13.77, 16.37, 16.96, 20.11, 19.75, 18.54, 18.99, 20.52, 20.02, 18.83, 17.40, 18.26, 19.80, 18.43, 16.54, 17.93]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df.set_index('Year', inplace=True)\n",
    "print(\"ðŸ“Š Dataset loaded\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature engineering\n",
    "def add_features(df):\n",
    "    df_feat = df.copy()\n",
    "    for col in df.columns:\n",
    "        df_feat[f'{col}_lag1'] = df_feat[col].shift(1)\n",
    "        df_feat[f'{col}_lag2'] = df_feat[col].shift(2)\n",
    "        df_feat[f'{col}_lag3'] = df_feat[col].shift(3)\n",
    "    for col in ['Oil_Price', 'Gov_Exp_GDP']:\n",
    "        df_feat[f'{col}_roll3'] = df_feat[col].rolling(3).mean()\n",
    "    df_feat['Oil_Price_Change'] = df_feat['Oil_Price'].pct_change()\n",
    "    return df_feat.dropna()\n",
    "\n",
    "df_final = add_features(df)\n",
    "X = df_final.drop(['GDP_Growth', 'Inflation', 'Unemployment'], axis=1)\n",
    "y = df_final[['GDP_Growth', 'Inflation', 'Unemployment']]\n",
    "\n",
    "# Train/test split\n",
    "train_idx = df_final.index <= 2019\n",
    "test_idx = df_final.index >= 2020\n",
    "\n",
    "X_train, X_test = X[train_idx], X[test_idx]\n",
    "y_train, y_test = y[train_idx], y[test_idx]\n",
    "\n",
    "print(f\"Train: {X_train.index.min()}â€“{X_train.index.max()}\")\n",
    "print(f\"Test: {X_test.index.min()}â€“{X_test.index.max()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest Example (full code in paper)\n",
    "rf_results = {}\n",
    "for target in ['GDP_Growth', 'Inflation', 'Unemployment']:\n",
    "    model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "    model.fit(X_train, y_train[target])\n",
    "    pred = model.predict(X_test)\n",
    "    mae = mean_absolute_error(y_test[target], pred)\n",
    "    rf_results[target] = mae\n",
    "\n",
    "print(\"Random Forest MAE:\", {k: round(v, 2) for k, v in rf_results.items()})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}